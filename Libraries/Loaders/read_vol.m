% data = read_vol(filename) read a RAW 3D volume (tomography/PyHST2)
%
% Read a RAW volume (float32) generated by PyHST2:
%   <http://ftp.esrf.fr/scisoft/PYHST2/>
%   <https://gitlab.esrf.fr/mirone/pyhst2>
%
% A '.par' file will be searched at the same location, to extract the volume shape.
% This '.par' file should contain text with lines such as:
%   END_VOXEL_1 = 693 # X-end of reconstruction volume
%   END_VOXEL_2 = 693 # Y-end of reconstruction volume
%   END_VOXEL_3 = 961 # Z-end of reconstruction volume
% or
%   NUM_IMAGE_1 = 693 # Number of pixels horizontally
%   NUM_IMAGE_2 = 961 # Number of pixels vertically
%
% References:
%   Alessandro Mirone et al, NIM B 324 (2014) 41. DOI: 10.1016/j.nimb.2013.09.030
%
% Input:  filename: vol file (string)
% output: structure
%
% See also: read_nii, read_mrc

function frame = read_vol(fname)

frame = [];

if nargin == 0 || any(strcmp(fname, {'identify','query','defaults'}))
    vol.name       ='RAW 3D volume (tomography/PyHST2)';
    vol.method     =mfilename;
    vol.extension  ='vol';
    frame = vol;
    return
end

% get any PAR file as header
[p,f,e] = fileparts(fname);
shape   = [ 0 0 0 ];

d = dir(fullfile(p, '*.par'));
if ~isempty(d)
  par = fullfile(p, d(1).name);
  disp([ mfilename ': Using PAR file ' par ]);
  header = fileread(par);
  header= str2struct(header);
  % now search for fields and extract
  
  f = { 'END_VOXEL_1','END_VOXEL_2','END_VOXEL_3','NUM_IMAGE_1','NUM_IMAGE_1'};
  for index=1:numel(f)
    field = f{index};
    if isfield(header, field)
      if     strcmp(field(end-1:end),'_1') dim=1;
      elseif strcmp(field(end-1:end),'_2') dim=2;
      elseif strcmp(field(end-1:end),'_3') dim=3;
      end
      if isnumeric(header.(field))
        val = header.(field);
      else
        val = str2num(strtok(header.(field),'#;%/'));
      end
      if isfinite(val) && ~shape(dim), shape(dim) = val; end
    end
  end
  if numel(find(~shape)) == 1
    shape(~shape) = numel(frame.data)/prod(shape(shape ~= 0));
  end
  header.shape = shape;
  frame.header = header;
end

% Open the image file
fid = fopen(fname,'r'); 
if (fid<0)
    fprintf(1,'\n read_vol() unable to read the file - %s.\n',fname);
    return;
end

% read the full volume as a float32 binary content
frame.data = fread(fid, inf, 'float32'); % can be large
fclose(fid);

if all(shape > 0) && numel(frame.data) == prod(shape)
  frame.data = reshape(frame.data, shape);
end
