function signal=sqw_linquad(varargin)
% model = sqw_linquad(p, h,k,l,w, {signal}) : linear-quadratic dispersion(HKL) with DHO(energy)
%
%   iFunc/sqw_linquad: a 4D S(q,w) with a 3D HKL dispersion linear in a given
%      direction (e.g. principal axis) and quadratic in other directions, and a 
%      DHO line shape. This dispersion corresponds with a local description of
%      an excitation, centered around an (H0,K0,L0,E0) point.
%   For q = (H0,K0,L0) E = Ph_E0_Center
%
% WARNING: Single intensity and line width parameters are used here.
%
% To model more than one branch, just add these models together.
%
% Example:
%   s=sqw_linquad(5); qh=linspace(0,.5,50);qk=qh; ql=qh'; w=linspace(0.01,10,50);
%   f=iData(s,s.p,qh,qk,ql,w); plot3(log(f(:,1,:,:)));
%
% Reference: https://en.wikipedia.org/wiki/Phonon
%
% input:  p: sqw_linquad model parameters (double)
%             p(1) = DC_Hlin          Linear direction, H [rlu]
%             p(2) = DC_Klin          Linear direction, K [rlu]
%             p(3) = DC_Llin          Linear direction, L [rlu]
%             p(4) = DC_Lslope        Linear slope along DC_[HKL]lin axis [rlu/meV]
%             p(5) = DC_Qt            Quadratic curvature (transverse to linear)
%             p(6) = DC_Qv            Quadratic curvature (vertical)
%             p(7) = DC_Hquad         Quadratic dispersion direction, H (transverse) [rlu]
%             p(8) = DC_Kquad         Quadratic dispersion direction, K (transverse) [rlu]
%             p(9) = DC_Lquad         Quadratic dispersion direction, L (transverse) [rlu]
%             p(10)= Ph_H0            Position of the dispersion, H [rlu]
%             p(11)= Ph_K0            Position of the dispersion, K [rlu]
%             p(12)= Ph_L0            Position of the dispersion, L [rlu]
%             p(13)= Ph_E0_Center     Position of the dispersion, Energy [meV]
%             p(14)= DHO_Amplitude
%             p(15)= DHO_Damping      Excitation damping, half-width [meV]
%             p(16)= DHO_Temperature  Temperature [K]
%             p(17)= Background   
%          or p='guess'
%         qh: axis along QH in rlu (row,double)
%         qk: axis along QK in rlu (column,double)
%         ql: axis along QL in rlu (page,double)
%         w:  axis along energy in meV (double)
%    signal: when values are given, a guess of the parameters is performed (double)
% output: signal: model value
%
% Version: $Date$
% See also iData, iFunc/fits, iFunc/plot, gauss, sqw_phonons, sqw_cubic_monoatomic, sqw_vaks
%   <a href="matlab:doc(iFunc,'Models')">iFunc:Models</a>
% (c) E.Farhi, ILL. License: EUPL.

signal.Name           = [ 'Sqw_linquad linear-quadratic dispersion(HKL) with DHO line shape [' mfilename ']' ];
signal.Description    = 'A 4D S(q,w) with a 3D HKL dispersion linear in a given direction (e.g. principal axis) and quadratic in other directions, and a DHO line shape. This dispersion corresponds with a local description of an excitation, centered around an (H0,K0,L0,E0) point.';

signal.Parameters     = {  ...
'DC_Hlin          Linear dispersion direction, H [rlu]' ...
'DC_Klin          Linear dispersion direction, K [rlu]' ...
'DC_Llin          Linear dispersion direction, L [rlu]' ...
'DC_Lslope        Linear slope along DC_[HKL]dir axis [meV/rlu]' ...
'DC_Qt            Quadratic curvature (transverse to linear, in plane) [meV/rlu]' ...
'DC_Qv            Quadratic curvature (vertical) [meV/rlu]' ...
'DC_Hquad         Quadratic dispersion direction, H (transverse) [rlu]' ...
'DC_Kquad         Quadratic dispersion direction, K (transverse) [rlu]' ...
'DC_Lquad         Quadratic dispersion direction, L (transverse) [rlu]' ...
'Ex_H0            Location of the dispersion, H [rlu]' ...
'Ex_K0            Location of the dispersion, K [rlu]' ...
'Ex_L0            Location of the dispersion, L [rlu]' ...
'Ex_E0_Center     Location of the dispersion, Energy [meV]' ...
'DHO_Amplitude' ...
'DHO_Damping      Excitation damping, half-width [meV]' ...
'DHO_Temperature  Temperature [K]' ...
'Background'  };
  
signal.Dimension      = 4;         % dimensionality of input space (axes) and result

signal.Expression     = { ...
'% define Bragg point, difference from Phonon pos', ...
'U1 = p(1:3);    % linear direction', ...
'U2 = p(7:9);    % quadratic transverse direction', ...
'HKLEph = p(10:13);  % center of measurement (phonon)', ...
'% create an ortho-normal basis from lin and quad directions', ...
'U3=cross(U1,U2);', ...
'U2=cross(U3,U1);', ...
'U3=U3/norm(U3);', ...
'U2=U2/norm(U2);', ...
'U1=U1/norm(U1);', ...
'% now compute the dispersion terms b[xyz]=Bragg location, d[xyz]=excitation shift/Bragg', ...
'bx = round(x); dx = (x - bx - HKLEph(1));  % [rlu]', ...
'by = round(y); dy = (y - by - HKLEph(2));', ...
'bz = round(z); dz = (z - bz - HKLEph(3));', ...
'% dispersion terms: linear and quadratic', ...
'dvx = (dx*U1(1) +dy*U1(2) +dz*U1(3) )*p(4) + HKLEph(4); % meV, lin', ...
'dvy = (dx*U2(1) +dy*U2(2) +dz*U2(3) )*p(5);             % meV, quad transv', ...
'dvz = (dx*U3(1) +dy*U3(2) +dz*U3(3) )*p(6);             % meV, quad vert', ...
'% handle curvature sign', ...
'wqs = dvx.*dvx + dvy.*dvy*sign(p(5)) + dvz.*dvz*sign(p(6));', ...
'wq  = sqrt(wqs);', ...
'T   = p(16);', ...
'this.UserData.maxFreq=max(wq(:));', ...
'if T<=0, T=300; end', ...
'n_w    = 1./(exp(t*11.609/T)-1);', ...
'signal = p(17)+p(14)*p(15)*t.*(n_w+1)./((t.^2-wqs).^2+(p(15)*t).^2);' };

signal=iFunc(signal);

p = [ 1 0 0 ...
 20 10 10 ...
 0 1 0 ...
 0.2 0 0 5 ...
 1 0.05 10 0];
if nargin == 0
  signal.ParameterValues=p;
elseif nargin == 1 && isnumeric(varargin{1})
  if length(varargin{1}) == 1 % [ Emax ]
    p(10) = varargin{1};
  end
  signal.ParameterValues = p;
elseif nargin > 1
  signal = signal(varargin{:});
end

