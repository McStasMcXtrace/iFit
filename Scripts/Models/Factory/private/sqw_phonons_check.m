function [options, result, read] = sqw_phonons_check(configuration, options, status)

target = options.target;

if ismac,      precmd = 'DYLD_LIBRARY_PATH= ;';
elseif isunix, precmd = 'LD_LIBRARY_PATH= ; '; 
else           precmd = ''; end

% handle input configuration: read
if exist(configuration)
  read = sprintf('import ase.io\nconfiguration = "%s"\natoms = ase.io.read(configuration)\n', ...
    configuration);
elseif ischar(configuration)
  read = configuration;
  % ASE has changed some of the modules hierarchy from 3.9 to 3.10+
  switch strtok(configuration, ' (')
  case 'bulk'
    % ASE 3.9 and 3.10+
    read = sprintf('from ase.lattice import bulk\natoms = %s\n', configuration);
  case 'molecule'
    if status.ase <= 3.9
      % ASE 3.9
      read = sprintf('from ase.structure import molecule\natoms = %s\n', configuration);
    else
      % ASE 3.10+: from ase.build import molecule
      read = sprintf('from ase.build import molecule\natoms = %s\n', configuration);
    end
  case 'nanotube'
    if status.ase <= 3.9
      % ASE 3.9
      read = sprintf('from ase.structure import nanotube\natoms = %s\n', configuration);
    else
      % ASE 3.10+: from ase.build import nanotube
      read = sprintf('from ase.build import nanotube\natoms = %s\n', configuration);
    end
  case 'crystal'
    if status.ase <= 3.9
      % ASE 3.9
      read = sprintf('from ase.lattice.spacegroup import crystal\natoms = %s\n', configuration);
    else
      % ASE 3.10+: from ase.spacegroup import crystal
      read = sprintf('from ase.spacegroup import crystal\natoms = %s\n', configuration);
    end
  end
end

options.script_create_atoms = sprintf([ ...
  '# python script built by ifit.mccode.org/Models.html sqw_phonons\n' ...
  '# on ' datestr(now) '\n' ...
  '# E. Farhi, Y. Debab and P. Willendrup, J. Neut. Res., 17 (2013) 5\n' ...
  '# S. R. Bahn and K. W. Jacobsen, Comput. Sci. Eng., Vol. 4, 56-66, 2002.\n' ...
  '#\n' ...
  '# read initial material structure and save atoms as a pickle\n\n' ...
  read ...
  'import pickle\n' ...
  'fid = open("' fullfile(target, 'atoms.pkl') '","wb")\n' ...
  'pickle.dump(atoms, fid)\n' ...
  'fid.close()' ...
  '# export atoms into usual formats\n' ...
  'print "Exporting structure to usual formats...\\n"\n' ...
  'from ase.io import write\n' ...
  'write("' fullfile(target, 'configuration.png') '", atoms)\n' ...
  'write("' fullfile(target, 'configuration.eps') '", atoms)\n' ...
  'write("' fullfile(target, 'configuration.pov') '", atoms)\n' ...
  'write("' fullfile(target, 'configuration.cif') '", atoms, "cif")\n' ...
  'write("' fullfile(target, 'configuration.x3d') '", atoms, "x3d")\n' ...
  'write("' fullfile(target, 'configuration.pdb') '", atoms, "pdb")\n' ...
  'write("' fullfile(target, 'configuration.html') '", atoms, "html")\n' ...
  'write("' fullfile(target, 'configuration.etsf') '", atoms, "etsf")\n' ...
  'write("' fullfile(target, 'configuration_SHELX.res') '", atoms, "res")\n' ...
  'write("' fullfile(target, 'configuration_POSCAR') '", atoms, "vasp")\n' ... 
  'import scipy.io as sio\n' ...
  'print "Exporting structure properties...\\n"\n' ...
  'properties = {\n' ...
  '  "reciprocal_cell" : atoms.get_reciprocal_cell()*6.283185, \n' ...
  '  "cell"            : atoms.get_cell(), \n' ...
  '  "volume"          : atoms.get_volume(), \n' ...
  '  "chemical_formula": atoms.get_chemical_formula(), \n' ...
  '  "chemical_symbols": atoms.get_chemical_symbols(), \n' ...
  '  "cell_scaled_unit": atoms.get_scaled_positions(), \n' ...
  '  "masses"          : atoms.get_masses(), \n' ...
  '  "positions"       : atoms.get_positions(), \n' ...
  '  "atomic_numbers"  : atoms.get_atomic_numbers() }\n' ...
  'try:\n' ...
  '  from pyspglib import spglib\n' ...
  '  properties["spacegroup"] = spglib.get_spacegroup(atoms)\n' ...
  'except:\n' ...
  '  pass\n' ...
  '# export properties as pickle\n' ...
  'fid = open("' fullfile(target, 'properties.pkl') '","wb")\n' ...
  'pickle.dump(properties, fid)\n' ...
  'fid.close()\n' ...
  '# export properties as MAT\n' ...
  'sio.savemat("' fullfile(target, 'properties.mat') '", properties)\n' ...
  ]);

% we create a python script to read/check/export the initial structure
fid = fopen(fullfile(target,'sqw_phonons_check.py'),'w+');
if fid == -1
  result = 'ERROR fopen';
  sqw_phonons_error([ mfilename ': failed create material structure reader for ' ...
    configuration ' (sqw_phonons_check.py)' ], options);
  return
end
fprintf(fid, '%s\n', options.script_create_atoms);
fclose(fid);

% display message at start
disp(' ')
disp([ mfilename ': starting phonons computation [' datestr(now) ']' ])
if ~isdeployed && usejava('jvm') && usejava('desktop')
  disp([ '  directory  = <a href="' target '">' target '</a>' ]);
else
  disp([ '  directory  = ' target ]);
end
disp(sprintf([ '  material   = ' configuration ]));
disp(sprintf([ '  calculator = ' options.calculator ]));
% copy the configuration into the target
if ~isempty(dir(configuration))
  try
  copyfile(configuration, target);
  end
end

% ------------------------------------------------------------------------------
% call python: read/export initial configuration
result = '';
try
  [st, result] = system([ precmd 'python ' fullfile(target,'sqw_phonons_check.py') ]);
end
% we test if the pickle file could be written. This way even if the export/save 
% properties fail, we can proceed.
disp(result)
if isempty(dir(fullfile(target, 'atoms.pkl')))  % FATAL
  result = 'ERROR python';
  return
end
