function signal=sqw_sine3d(varargin)
% signal = sqw_sine3d(p, h,k,l,w, {signal}) : 3D dispersion(HKL) with DHO(energy)
%
%   iFunc/sqw_sine3d: a 4D S(q,w) with a 3D HKL sine dispersion, and a DHO line
%      shape. The sine dispersion can be tuned with energy gaps and zone centre
%      and boundary, as well as a phase shift on the sine wave.
%      For acoustic branch, the phase and the zone centre gap  will be left at 0.
%      For an optical branch the gaps are all non-zero, and the phase can be 0 
%      or e.g. 1/2 (to switch from sine to cosine function).
%      To model more than one branch, just add these models together.
%
% gauss2d([w1 w2])        creates a model with a specified widths
% gauss2d([ parameters ]) creates a model with specified model parameters
%
% Reference: http://en.wikipedia.org/wiki/Gaussian_function
%
% input:  p: gauss2d model parameters (double)
%            p = [  'Amplitude' 'Centre_X' 'Center_Y'
%                   'HalfWidth_X' 'HalfWidth_Y' 'Angle' 'Background' ] 
%            the rotation angle is given in degrees.
%          or 'guess'
%         x: axis along rows    (double)
%         y: axis along columns (double)
%    signal: when values are given, a guess of the parameters is performed (double)
% output: signal: model value
% ex:     signal=gauss2d([1 2 .5 .2 .3 30 .2], -2:.1:2, -3:.1:3); or plot(gauss2d)
%
% Version: $Date$
% See also iData, iFunc/fits, iFunc/plot, gauss

signal.Name           = [ 'S(q,w) 3D sine dispersion with DHO line shape [' mfilename ']' ];
signal.Description    = 'A 3D HKL sine wave dispersion with tunable energy gap at zone centre and boundary, and DHO line shape';

signal.Parameters     = {  ...
  'Ezb_qh zone-boundary energy in QH direction [meV]' ...
  'Ezb_qk qk zone-boundary energy in QK direction [meV]' ...
  'Ezb_ql ql zone-boundary energy in QL direction [meV]' ...
  'E0 zone-centre energy gap [meV]' ...
  'QH0 qh zone-centre [rlu]' ...
  'QK0 qk zone-centre [rlu]' ...
  'QL0 ql zone-centre [rlu]' ...
  'QH_phase qh phase factor [multiples of pi]' ...
  'QK_phase qk phase factor [multiples of pi]' ...
  'QL_phase ql phase factor [multiples of pi]' ...
  'Gamma Lorentzian width in energy [meV]' ...
  'Temperature [K]' ...
  'Amplitude' 'Background' };
  
signal.Dimension      = 4;         % dimensionality of input space (axes) and result

m1 = @(x,s) sum(s(:).*x(:))/sum(s(:));
m2 = @(x,s) sqrt(abs( sum(x(:).*x(:).*s(:))/sum(s(:)) - m1(x,s).^2 ));

signal.Guess          = @(x,y,z,t,signal)[ ...
  m1(t,signal) m1(t,signal) m1(t,signal) ...
  std(t(:)) round(mean(x(:))) round(mean(y(:))) round(mean(z(:))) ...
  0 0 0 std(t(:))/100 50 1 0 ];        % default parameters

signal.Expression     = { ...
'wqx = (p(1)^2-p(4)^2)*sin(p(8) *pi*(x-p(5))).^2;', ...
'wqy = (p(2)^2-p(4)^2)*sin(p(9) *pi*(y-p(6))).^2;', ...
'wqz = (p(3)^2-p(4)^2)*sin(p(10)*pi*(z-p(7))).^2;', ...
'wq  = sqrt(p(4)^2+wqx+wqy+wqz);', ...
'n_w = 1./(exp(t*11.609/p(12))-1);', ...
'signal = p(14)+p(13)*p(11)*t.*(n_w+1)./((t.^2-wq.^2).^2+(p(11)*t).^2);' };

signal=iFunc(signal);

if nargin > 1
  signal = signal(varargin{:});
end

