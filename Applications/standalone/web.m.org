function web(varargin)

if length(varargin)
  url = varargin{1};
else
  url = '';
end
if isempty(url), return; end
if ~isdeployed && usejava('jvm')
  builtin('web',varargin{:});
else
  if ~isempty(private_help(url))
    return
  end
  if usejava('jvm') && ~ispc && ~ismac
    % use Java browser
    if ~isempty(dir(url))
      url = [ 'file://' url ]; % local file
    end
    hFig       = figure('menubar','none','Name',url);
    je         = javax.swing.JEditorPane('text/html',url);
    jp         = javax.swing.JScrollPane(je);
    [hcomponent, hcontainer] = javacomponent(jp, [], hfig);
    set(hcontainer, 'units', 'normalized', 'position', [0,0,1,1]);
    je.setEditable(false);
    je.setPage(url);
    disp('This Web browser does NOT support hyperlinks. Navigate through pages by');
    disp('  requesting other pages among the following (with e.g. "doc(iData,''Load'')")');
    dir([ ifitpath filesep 'Docs'  filesep '*.html' ]);
  else
    % attempts to guess how to launch the browser
    if ispc
      system([ 'start /D "' ifitpath '" Docs']);
    elseif ismac
      system([ 'open "' url '"' ]);
    else
      browser = getenv('BROWSER');
      if isempty(browser)
        [flag, out]=system('locate firefox');
        if isempty(browser) && ~isempty(out), browser='firefox'; end
        [flag, out]=system('locate google-chrome');
        if isempty(browser) && ~isempty(out), browser='google-chrome'; end
        [flag, out]=system('locate konqueror');
        if isempty(browser) && ~isempty(out), browser='konqueror'; end
        [flag, out]=system('locate seamonkey');
        if isempty(browser) && ~isempty(out), browser='seamonkey'; end
      end
      if isempty(browser), browser = 'gnome-open'; end
      if ~isempty(url)
        browser = [ browser ' "' url '"' ];
      end
      system( browser );
      disp('WARNING: if the browser does not start, launch it manually and enter the above mentioned URL');
    end
  end
end

% ------------------------------------------------------------------------------

function h=private_help(varargin)
% HELP Display help text in Command Window, for iFit commands and methods
%
% HELP FUN displays a description of and syntax for the function FUN.
%     When FUN is in multiple directories on the MATLAB path, HELP displays
%     information about the first FUN found on the path.
%
% HELP PATHNAME/FUN displays help for the function FUN in the PATHNAME
%     directory. Use this syntax to get help for overloaded functions.
%
% HELP CLASSNAME.METHODNAME displays help for the method METHODNAME of
%     the fully qualified class CLASSNAME. To determine CLASSNAME for
%     METHODNAME, use CLASS(OBJ), where METHODNAME is of the same class as
%     the object OBJ.
%
%     HELP CLASSNAME displays help for the fully qualified class CLASSNAME.
%
% example: help iData/cos; help iFunc

h = '';
if length(varargin)
  url = varargin{1};
else
  url = '';
end
if isempty(url), return; end
if ~isdeployed
  builtin('help',varargin{:});
else
  % attempts to guess what to display
  [p,f,e] = fileparts(url);
  h = fullfile(p , [f '.txt' ]); 
  
  % is the url a path to an iFit function ?
  if ~isempty(dir(h))
    fid = fopen(h, 'r');
    h   = fread(fid, Inf, 'uint8=>char')';
    fclose(fid);
  elseif any(strcmp(strtok(url, '.'), {'iData','iFunc'}))
  % is the url an iFit class.method or class
    [c, m] = strtok(url, '.');
    if isempty(m), m = c; else m=m(2:end); end
    url    = fullfile('Objects', [ '@' c ], m);
    feval(mfilename, url);
    return
  else
  % is the url an iFit function ?
    if ~isempty(dir(which(url)))
      feval(mfilename, which(url));
    else h=[]; 
      disp([ 'help: ' url ' documentation can not be found in the standalone help system.') ]);
      disp('Matlab help is fully available at <http://www.mathworks.com/help/techdoc>.');
    end
    return
  end
  % get the help string from the corresponding file (must have been generated at deploy stage)
  
  % display the help
  fprintf(1, '%s', h);
end

